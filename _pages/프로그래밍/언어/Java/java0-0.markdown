---
title: "[Java] 자바 기초 총정리 - 자바란, 자바의 특징, 자바 실행 도구, 실행과정"
tags:
    - Java기초
date: "2025-03-09"
thumbnail: "/assets/img/thumbnail/book.jpg"
---

이번에 학교에서 객체지향 프로그래밍 수업을 듣게되었는데,
자바개념을 다시 복습하는 것이 좋을 것 같아서 주요 개념을 몽땅 정리해보려고 한다

<br>

# 자바의 탄생과 발전
---
## **(1) 자바의 탄생 (1991년)**
• **그린 프로젝트(Green Project)**에서 시작  
• **Sun Microsystems**의 **제임스 고슬링(James Gosling)** 주도  
• **가전제품용 소프트웨어 개발**을 목적으로 연구 시작  

## **(2) 자바(Java) 공개 (1995년)**
• 1995년 **‘Java’ 공식 발표**  
• 최초의 이름: **"오크(OAK)"** → 이후 **자바(Java)**로 개명  
• 공개 당시 **웹 브라우저 Netscape에서 실행**  

## ***(3) 자바의 개발 목적**
• **C 언어의 포인터(pointer) 문제 해결**: 포인터 없이 더 안전한 프로그래밍 가능  
• **플랫폼 호환성 문제 해결**: 기존 언어는 PC, 유닉스, 메인프레임 간 호환성이 부족 -> 한 번 작성하면 어디서든 실행 가능 (Write Once, Run Anywhere)**  
• **플랫폼 독립적인 언어 개발**: 다양한 플랫폼에서 동작하는 프로그래밍 언어 필요  
• **웹과 네트워크 환경 최적화**: 인터넷과 웹 환경에서 쉽게 사용할 수 있도록 설계  
• **메모리 사용량이 적고, 다양한 가전제품에 적용 가능**: 내장형 시스템(Embedded System) 요구 충족  

## **(4) 자바의 발전**
• 1995년 **인터넷과 웹의 발전**과 함께 주목받기 시작  
• 2009년 **Sun Microsystems가 오라클(Oracle)에 인수**  
• 현재까지 **광범위한 분야(웹, 모바일, 서버, IoT)에서 사용**  



<br>
<br>
<br>

# 자바의 플랫폼 독립성
---
## **(1) WORA (Write Once, Run Anywhere)**
> 한 번 작성된 코드가 모든 플랫폼에서 실행 가능

• 기존 언어(C/C++)의 **플랫폼 종속성 문제 해결**  
• OS(운영체제), H/W(하드웨어)에 **상관없이 동일한 실행 환경 제공**  
• **네트워크 환경**에서도 원활한 실행 가능  
• **웹 브라우저, 분산 환경**에서도 실행 가능  

## **(2) WORA를 가능하게 하는 자바의 특징**
**1) 바이트코드 (Bytecode)**
•  자바 소스를 **컴파일하여 생성된 중립적인 목적 코드**  
•  특정 CPU에 종속되지 않음  
•  **JVM(Java Virtual Machine)에 의해 해석되고 실행됨**  

**2) 자바 가상 머신 (JVM - Java Virtual Machine)**
•  **바이트코드를 실행하는 가상 기계(소프트웨어)**  
•  운영체제(OS)와 독립적으로 동작  
•  **각 플랫폼(OS)별로 JVM만 설치하면 자바 프로그램 실행 가능**  



<br>
<br>
<br>


# 자바 배포판 종류
---
> 오라클은 개발 환경에 따라 다양한 자바 베포판 제공

<br>

## **Java SE**
• 자바 표준 베포판(Standard Edition) 
• 데스크탑과 서버 응용 개발 플랫폼

## **Java ME**
• 자바 마이크로 베포판 (Micro Edition)
• 휴대전화나 PDA, 셋톱박스 등 성능/자원이 제한적인 하드웨어 응용 개발을 위한 플랫폼
• 가장작은메모리필요
• JavaSE의 일부 + 임베디드 시스템 및 가전제품을 위한 API 정의

## **Java EE**
• 자바 기업용 베포판 (Enterprise Edition)
• 자바를 이용한 다중 사용자, 기업용 응용 개발을 위한 플랫폼 
• JavaSE + 인터넷 기반의 서버 사이드 컴퓨팅관련 API 추가


<br>
<br>
<br>



# **자바 개발 도구 (JDK, JRE, JVM)**  
---
## **(1) JDK (Java Development Kit) - 자바 개발 키트**
• 자바 애플리케이션을 개발하고 실행할 수 있는 도구 모음  
• JDK는 JRE와 추가적인 개발 도구(컴파일러, 디버거 등)를 포함  
• 자바 코드를 작성하고 실행하려면 반드시 JDK가 필요  

#### **(2) JRE (Java Runtime Environment) - 자바 실행 환경**
• 자바 프로그램을 실행하기 위한 환경  
• JVM과 자바 API(라이브러리)를 포함  
• 개발자가 아닌 일반 사용자는 JRE만 설치하면 자바 프로그램 실행 가능  

#### **(3) JVM (Java Virtual Machine) - 자바 가상 머신**
• 자바 바이트코드를 실행하는 소프트웨어  
• 플랫폼마다 다른 JVM이 존재하지만, 동일한 실행 환경 제공  
• JVM은 바이트코드를 해석하여 CPU가 실행할 수 있는 기계어로 변환  

<br>
<br>
<br>

# **자바 실행 과정(Java Execution Process)**  
---

## **자바 실행과정**
**(1) 소스 코드 작성**
> 개발자가 `.java` 파일을 작성한다

```java
public class Hello {
    public static void main(String[] args) {
        System.out.println("Hello, Java!");
    }
}
```

<br>

**(2) 컴파일 (javac)**
> 작성된 소스 코드는 `javac`(Java Compiler)에 의해 바이트코드로 변환된다  
• 컴파일 후 `Hello.class` 파일이 생성되며, 이 파일은 **CPU가 직접 실행할 수 없는 바이트코드**로 이루어져 있다

```bash
javac Hello.java
```

> **바이트코드(Bytecode)란?**
• 자바 소스를 컴파일한 결과물  
• 특정 CPU에 종속되지 않는 **중립적인 코드**  
• JVM에 의해 해석되고 실행되며, `.class` 파일에 저장됨  
• 모든 운영체제에서 동일한 실행 환경 제공  

<br>

**(3) 클래스 로딩 (JVM이 .class 파일 로드)**
• JVM의 **Class Loader**가 `.class` 파일을 메모리에 적재  
• 필요한 클래스들을 동적으로 로딩하여 실행  

<br>

**(4) 실행 (JVM이 바이트코드 해석)**
• **인터프리터(Interpreter) 방식**으로 바이트코드를 한 줄씩 해석하며 실행  
• 또는 **JIT(Just-In-Time) 컴파일러**를 통해 기계어로 변환하여 성능 최적화  
• 최종적으로 CPU가 실행  

```bash
java Hello
```

출력:
```
Hello, Java!
```
<br>

**(6) 프로그램 종료**
> 프로그램 종료 시, JVM이 사용한 메모리를 해제하고 실행을 종료  

<br>
<br>

## **자바 실행 과정의 핵심 흐름**
```
.java (소스 코드)
   ↓ [javac 컴파일]
.class (바이트코드)
   ↓ [JVM 실행]
CPU에서 실행 (Machine Code)
```

<br>

## **JVM의 주요 역할**

| 단계 | 역할 |
|:---:|:---:|
| 클래스 로딩 | `.class` 파일을 JVM에 로드 |
| 바이트코드 검증 | 코드의 안정성 검사 |
| 실행 (인터프리터 & JIT) | 바이트코드를 CPU가 이해하는 기계어로 변환 |
| 가비지 컬렉션(GC) | 더 이상 사용되지 않는 객체 제거 |

<br>

## **자바 실행 환경의 핵심 개념**
•  JDK는 자바 개발을 위한 **전체 환경**
•  JRE는 **JVM과 API 라이브러리**를 포함한 **실행 환경**
• JVM은 **바이트코드를 해석하여 실행**하는 역할
•  바이트코드는 **CPU에 종속되지 않으며, JVM에서 실행됨**

