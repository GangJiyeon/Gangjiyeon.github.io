---
title: "[Java] 자바 기초 총정리"
tags:
    - Java기초
date: "2025-03-10"
thumbnail: "/assets/img/thumbnail/book.jpg"
---

이번에 학교에서 객체지향 프로그래밍 수업을 듣게되었는데,
자바개념을 다시 복습하는 것이 좋을 것 같아서 주요 개념을 몽땅 정리해보려고 한다

<br>

# **키워드와 예약어**
---

자바에서 `키워드(Keyword)`와 `예약어(Reserved Word)`는 종종 같은 의미로 사용되는데, 엄밀히 따지면 약간 차이가 있다

<br>

## **키워드란 VS 예약어**

|비교|키워드|예약어|
|:---:|:---:|:---:|
|정의|특정 기능을 수행하는 자바의 필수적인 단어|자바에서 미리 정의된 단어|
|변수/클래스/메서드명으로 사용|불가능|불가능|
|사용|모두 현재 사용|사용되고 있지 않은(미래에 사용될 수 있는) 단어도 존재|
|예시|`class`, `public` 등|키워드, `goto`, `const` 등 사용되지 않는 단어|

> 즉, 키워드는 `프로그래밍에 실제 사용되는 단어`이고, 예약어는 `단순히 예약된 단어 (키워드 + 현재 사용되지 않지만 미래를 위해 예약된 단어)`를 의미한다


<br>


## **키워드(예약어)의 종류**

|구분|키워드(예약어)|
|:---:|:---:|
|자료형|`byte`, `short`, `int`, `long`,`float`, `double`, `char`, `boolean`|
|제어문|`if`, `else`, `switch`, `case`, `default`, `while`, `do`, `for`, `break`, `continue`, `return`|
|접근제어자|`publice`, `private`, `protected`, `default(예약어X)`|
|클래스 및 객체|`class`, `interface`, `extends`, `implements`, `new`, `this`, `super`, `abstract`, `final`, `static`|
|예외 처리|`try`, `catch`, `finally`, `throw`, `throws`|
|패키지/임포트|`package`, `import`|
|예약어|`instanceof`, `enum`, `native`, `strictfp`, `transient`, `assert`|

<br> 
<br>
<br>

# **식(Expression)과 문장(Statement)**
---
## **식**
> 값을 생성하는 코드
변수를 포함한 연산자, 메서드 호출 등을 의미
항상 값으로 평가됨

<br>

## **문장**
> 하나의 완전한 실행(명령)의 단위
세미콜론(;)으로 끝남
선언문, 실행문, 제어문 등이 포함됨

|문장의 종류|설명|예시|
|:---:|:---:|:---:|
|선언문|변수선언|`int x;`|
|대이비문|변수에 값 할당|`x = 10;`|
|제어문|흐름 제어 `(if, for, while)`|`if (x > 0) {}`|
|메서드 호출문|메서드 실행|`System.out.println(x);`|
|반환문|메서드 결과 반환|`return x;`|

# **자료형**
---

## **자료형이란?**

> `자료형(Data Type)`은 `변수에 저장할 수 있는 값의 종류`를 정의하며, 크게 **기본 자료형(Primitive Type)**과 **참조 자료형(Reference Type)**으로 나뉜다

|구분|기본자료형|참조자료형|
|:---:|:---:|:---:|
|저장방식|값 자체를 저장|객체의 주소값 저장|
|크기|고정 크기|동적 크기 가능|
|메모리 저장영역|스택(stack)|힙(heap)|
|기본값|`0`, `false` 등|`null`|

<br>

## **기본자료형**
> 자바에서 직접 값을 저장하는 데이터 타입

|자료형 구분|종류|
|:---:|:---:|
|정수형|`byte`: 1byte, default 0, -128 ~ 127 <br>`short`: 2byte, default 0, -32,768 ~ 32,767 <br> `int`: 4byte, default 0, -2,147,483,648 ~ 2,147,483,647 <br>`long`: 8byte, default 0L, -9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807|
|실수형|`float`: 4byte, default 0.0f, 32비트 부동소수점 (소수점 이하 약 7자리 정밀도) <br>`double`: 8byte, default 0.0d, 64비트 부동소수점 (소수점 이하 약 15자리 정밀도)|
|문자형|`char`: 2byte, default \u0000, 유니코드 문자 (0~65535)|
|불리언형|`boolean`: 1byte, default false, true, false|

<br>

## **참조자료형**
> 객체의 주소값을 저장하는 타입

(1) 배열 (array): 같은 타입의 데이터를 연속적(메모리상 연속된 공간에)으로 저장하는 자료구조
• 한 번 크기를 정하면 변경할 수 없음
• 배열 사용하기

```java
/* 배열 선언 후 초기화 */
// 배열 선언하기
int[] numbers;  // 권장
int numbers2[]; // 비권장, 하지만 가능

// 배열 초기화(Initialization) > 할당
int [] numbers = new int[5];    // java default값을 초기값으로 지정
````

```java
/* 배열 선언과 초기화를 동시에 */
// 방법 1: 배열 리터럴 사용
int[] numbers = {1, 2, 3, 4, 5};    // 명시적으로 초기화(할당)

// 방법 2: new 연산자 사용
int[] numbers2 = new int[]{10, 20, 30};

// 방법 3: 개별 값 할당
int[] numbers3 = new int[3];
numbers3[0] = 100;
numbers3[1] = 200;
numbers3[2] = 300;
```

• 2차원 배열 사용하기

```java
// 2차원 배열 선언 및 크기 지정
int[][] matrix = new int[3][3];  // 3x3 배열 (초기값: 0)

// 2차원 배열 초기화 (직접 할당)
int[][] matrix2 = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

// 개별 요소 접근
matrix[0][0] = 10;  // 첫 번째 행, 첫 번째 열 값 변경

```

<br>


(2) 클래스(class): 사용자가 정의한 객체를 생성하는 데이터 타입

```java
class Person {
    String name;
    int age;
}
````

<br>

(3) 인터페이스(interface): 다형성을 구현하기 위해 사용하는 참조형 타입

```java
interface Animal {
    void makeSound();
}
````

<br>


(4) 문자열(string): 문자들의 집합이며, `String` 클래스의 객체로 취급됨

```java
String message = "Hello, Java!";
```

class, 인터페이스, 문자열은 이후의 글에서 더 알아보도록 하자

<br>
<br>
<br>

# **자바의 연산자(Operators)**
---
자바의 연산자는 **기능에 따라 6가지 유형**으로 나뉜다

## **산술 연산자 (Arithmetic Operators)**
> 숫자에 대한 기본적인 계산을 수행하는 연산자

|연산자|설명|예제|결과|
|:---:|:---:|:---:|:---:|
|`+`|덧셈|`5 + 3`|`8`|
|`-`|뺄셈|`5 - 3`|`2`|
|`*`|곱셈|`5 * 3`|`15`|
|`/`|나눗셈(몫)|`10 / 3`|`3`(정수 나눗셈, 소수점 이하 버림)|
|`%`|나머지|`10 % 3`|`1`|

<br>

## **대입 연산자 (Assignment Operators)**
> 변수에 값을 저장할 때 사용되는 연산자

|연산자|설명|예제|결과|
|:---:|:---:|:---:|:---:|
|`=`|값 할당|`x = 10;`|`x`가 `10`이 됨|
|`+=`|더한 후 할당|`x += 5;`|`x = x + 5`|
|`-=`|뺀 후 할당|`x -= 3;`|`x = x - 3`|
|`*=`|곱한 후 할당|`x *= 2;`|`x = x * 2`|
|`/=`|나눈 후 할당|`x /= 2;`|`x = x / 2`|
|`%=`|나머지 후 할당|`x %= 3;`|`x = x % 3`|


<br>

## **비교 연산자 (Comparison Operators)**
> 두 값을 비교하고 boolean 값(`true` 또는 `false`)을 반환

|연산자|설명|예제|결과|
|:---:|:---:|:---:|:---:|
| `==` | 두 값이 같은지 비교 | `5 == 3` | `false` |
| `!=` | 두 값이 다른지 비교 | `5 != 3` | `true` |
| `>` | 왼쪽이 큰지 비교 | `5 > 3` | `true` |
| `<` | 오른쪽이 큰지 비교 | `5 < 3` | `false` |
| `>=` | 왼쪽이 크거나 같은지 비교 | `5 >= 5` | `true` |
| `<=` | 오른쪽이 크거나 같은지 비교 | `5 <= 3` | `false` |

<br>

## **논리 연산자 (Logical Operators)**
> 조건문에서 주로 사용되며, **true 또는 false 값을 반환**

|연산자|설명|예제|결과|
|:---:|:---:|:---:|:---:|
| `&&` | AND (둘 다 `true`이면 `true`) | `(5 > 3) && (10 > 2)` | `true` |
| `||` | OR (하나라도 `true`이면 `true`) | `(5 > 3) || (10 < 2)` | `true` |
| `!` | NOT (반대값 반환) | `!(5 > 3)` | `false` |

<br>

## **비트 연산자 (Bitwise Operators)**
> **2진수 비트 단위**로 연산을 수행하는 연산자

|연산자|설명|예제(`a=5`, `b=3`)|결과|
|:---:|:---:|:---:|:---:|
| `&` | 비트 AND | `5 & 3` | `1` (0101 & 0011 = 0001) |
| `|` | 비트 OR | `5 | 3` | `7` (0101 | 0011 = 0111) |
| `^` | 비트 XOR | `5 ^ 3` | `6` (0101 ^ 0011 = 0110) |
| `~` | 비트 NOT | `~5` | `-6` (비트 반전) |
| `<<` | 왼쪽 시프트 | `5 << 2` | `20` (5 × 2²) |
| `>>` | 오른쪽 시프트 | `5 >> 1` | `2` (5 ÷ 2¹) |

<br>

## **증감 연산자 (Increment & Decrement)**
> **변수의 값을 1 증가 또는 감소시키는 연산자**

|연산자|설명|예제|결과|
|:---:|:---:|:---:|:---:|
| `++` | 1 증가 | `x++` 또는 `++x` | `x = x + 1` |
| `--` | 1 감소 | `x--` 또는 `--x` | `x = x - 1` |


<br>

## **삼항 연산자 (Ternary Operator)**
> **간단한 조건문 대체**

 `조건 ? 참일 때 값 : 거짓일 때 값`



